import com.android.annotations.NonNull
import com.android.build.OutputFile
import com.android.builder.testing.api.TestServer
import com.testdroid.api.APIClient
import com.testdroid.api.APIKeyClient
import com.testdroid.api.model.APIProject
import com.testdroid.api.model.APIUser
import groovy.json.JsonSlurper

buildscript {
  repositories {
    google()
    mavenCentral()
    jcenter()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:$androidGradlePluginVersion"
    classpath "org.apache.httpcomponents:httpclient-android:4.3.3"
    classpath "com.testdroid:testdroid-api:2.71"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    classpath "org.jlleitschuh.gradle:ktlint-gradle:8.2.0"
  }
}

plugins {
  id("com.android.application")
  id("checkstyle")
  id("com.github.triplet.play") version("2.4.1")
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco-android'
apply plugin: "org.jlleitschuh.gradle.ktlint"

jacoco {
  toolVersion = "0.8.3"
}

tasks.withType(Test) {
  jacoco.includeNoLocationClasses = true
}

def buildNumber = System.getenv('TRAVIS_BUILD_NUMBER') ?: "dev"

ext {
  versionMajor = 3
  versionMinor = 0
  versionPatch = 3
}

private String generateVersionName() {
  "${ext.versionMajor}.${ext.versionMinor}.${ext.versionPatch}"
}

/*
* max version code: 21-0-0-00-00-00
* our template    : UU-D-A-ZZ-YY-XX
* where:
* X = patch version
* Y = minor version
* Z = major version (+ 20 to distinguish from previous, non semantic, versions of the app)
* A = number representing ABI split
* D = number representing density split
* U = unused
*/

private Integer generateVersionCode() {
  20 * 10000 +
    (ext.versionMajor * 10000) +
    (ext.versionMinor * 100) +
    (ext.versionPatch)
}

android {
  compileSdkVersion 28
  testServer new TestDroidUpload()

  defaultConfig {
    minSdkVersion 15
    targetSdkVersion 28
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    multiDexEnabled true
    vectorDrawables.useSupportLibrary = true
    archivesBaseName = "$buildNumber"
  }

  aaptOptions {
    cruncherEnabled true
  }

  testBuildType "debug"

  lintOptions {
    abortOnError true
    checkAllWarnings true
    warningsAsErrors true

    ignore 'SyntheticAccessor',
      //TODO stop ignoring below this
      'MissingTranslation',
      'CheckResult',
      'LabelFor',
      'DuplicateStrings',
      'LogConditional'

    warning 'UnknownNullness',
      'SelectableText',
      'IconDensities',
      'SyntheticAccessor'
    baseline file("lint-baseline.xml")
  }

  testOptions {
    execution 'ANDROIDX_TEST_ORCHESTRATOR'
    unitTests.returnDefaultValues = true
    unitTests.all {
      useJUnitPlatform()
      testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        outputs.upToDateWhen { false }
        showStandardStreams = true
      }
    }
  }
  sourceSets {
    test {
      java.srcDirs += "$projectDir/src/testShared"
    }

    androidTest {
      java.srcDirs += "$projectDir/src/testShared"
    }
  }

  flavorDimensions "default"

  signingConfigs {
    release {
      storeFile file("../kiwix-android.keystore")
      storePassword System.getenv("KEY_STORE_PASSWORD") ?: "000000"
      keyAlias System.getenv("KEY_ALIAS") ?: "keystore"
      keyPassword System.getenv("KEY_PASSWORD") ?: "000000"
    }
  }

  buildTypes {

    // Main build type for debugging
    debug {
      multiDexKeepProguard file("multidex-instrumentation-config.pro")
      buildConfigField "String", "KIWIX_DOWNLOAD_URL", "\"http://mirror.download.kiwix.org/\""
      buildConfigField "boolean", "KIWIX_ERROR_ACTIVITY", "false"
      testCoverageEnabled true
    }

    // Release Type
    release {
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.release
      buildConfigField "String", "KIWIX_DOWNLOAD_URL", "\"http://mirror.download.kiwix.org/\""
      buildConfigField "boolean", "KIWIX_ERROR_ACTIVITY", "true"
    }
  }

  productFlavors {
    // Vanilla Kiwix app
    kiwix {
      println "Configuring Kiwix"
      // Set vanilla config
      buildConfigField "boolean", "IS_CUSTOM_APP", "false"
      buildConfigField "boolean", "HAS_EMBEDDED_ZIM", "false"
      buildConfigField "String", "ZIM_FILE_NAME", "\"\""
      buildConfigField "long", "ZIM_FILE_SIZE", "0"
      buildConfigField "int", "CONTENT_VERSION_CODE", "0"
      buildConfigField "String", "ENFORCED_LANG", "\"\""
      resValue "string", "app_name", "Kiwix"
      resValue "string", "app_search_string", "Search Kiwix"
      if (project.hasProperty("version_code")) {
        def version_code = project.property("version_code")
        versionCode version_code.toInteger()
      } else {
        versionCode generateVersionCode()
      }
      if (project.hasProperty("version_name")) {
        versionName project.property("version_name")
      } else {
        versionName generateVersionName()
      }
    }


  }

  compileOptions {
    encoding = "UTF-8"
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  dexOptions {
    javaMaxHeapSize "4g"
  }

  androidExtensions {
    experimental = true
  }

  def abiCodes = ['arm64-v8a': 6, 'x86': 3, 'x86_64': 4, 'armeabi-v7a': 5]
  def densityCodes = ['mdpi': 2, 'hdpi': 3, 'xhdpi': 4, 'xxhdpi': 5, 'xxxhdpi': 6]
  splits {
    abi {
      enable true
      reset()
      include "x86", "x86_64", 'armeabi-v7a', "arm64-v8a"
      universalApk true
    }
    density {
      enable false
      reset()
      include "mdpi", "hdpi", "xhdpi", "xxhdpi", "xxxhdpi"
    }
  }
  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      def baseAbiVersionCode = abiCodes.get(output.getFilter(OutputFile.ABI)) ?: 0
      def baseDensityVersionCode = densityCodes.get(output.getFilter(OutputFile.DENSITY)) ?: 0
      output.versionCodeOverride =
        (baseDensityVersionCode * 10000000) +
          (baseAbiVersionCode * 1000000) +
          variant.versionCode
    }
  }
}

play {
  enabled = true
  serviceAccountCredentials = file("../google.json")
  track = "alpha"
  releaseStatus = "draft"
  resolutionStrategy = "fail"
}

ktlint {
  android = true
}

class TestDroidUpload extends TestServer {
  def buildNumber = System.getenv("TRAVIS_BUILD_NUMBER")
  def API_KEY = System.getenv("PUBLIC_TESTDROID_API_KEY")
  def TESTDROID_SERVER = "https://cloud.testdroid.com"
  def RUNNER_GATEWAY = System.getenv("TESTDROID_RUNNER_GATEWAY")
  def accessGroup = System.getenv("ACCESS_GROUP_ID")

  @Override
  String getName() {
    return "kiwixtest"
  }

  @Override
  void uploadApks(@NonNull String variantName, @NonNull File testApk, File testedApk) {
    APIUser.metaClass.shareFile { id, accessGroup ->
      System.out.println(id)
      try {
        delegate.postResource(createUri(selfURI, "/files/" + id + "/share"),
          [accessGroupId: accessGroup], APIProject.class)
      } catch (Exception e) {
        System.out.println(e.getLocalizedMessage())
      }
    }

    APIClient client = new APIKeyClient(TESTDROID_SERVER, API_KEY)
    APIUser user = client.me()
    String testId = user.uploadFile(testApk).getId()
    user.shareFile(testId, accessGroup)
    String testedId = user.uploadFile(testedApk).getId()
    user.shareFile(testedId, accessGroup)

    new URL(RUNNER_GATEWAY + "?apk=" + testedId + "&test=" + testId + "&buildno=" + buildNumber).
      getText()
  }

  @Override
  boolean isConfigured() {
    return true
  }
}

apply from: "${rootDir}/team-props/git-hooks.gradle"
afterEvaluate {
  tasks['preBuild'].dependsOn installGitHooks
}

dependencies {
  implementation project(":core")
  androidTestImplementation("androidx.test.espresso:espresso-core:$espressoVersion")
  androidTestImplementation "androidx.test.espresso:espresso-web:$espressoVersion"
  androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
  androidTestImplementation("com.schibsted.spain:barista:$baristaVersion") {
    exclude group: "com.android.support.test.uiautomator"
  }
  androidTestImplementation("androidx.test.espresso:espresso-contrib:$espressoVersion")
  androidTestImplementation "androidx.annotation:annotation:$annotationVersion"
  androidTestImplementation "androidx.test.ext:junit:1.1.1"
  androidTestImplementation "androidx.test:runner:1.2.0"
  androidTestImplementation "androidx.test:rules:1.2.0"
  androidTestImplementation "androidx.test:core:1.2.0"
  androidTestImplementation "com.squareup.okhttp3:mockwebserver:3.6.0"
  androidTestUtil 'androidx.test:orchestrator:1.1.0'
  androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"
  androidTestCompileOnly "javax.annotation:javax.annotation-api:$javaxAnnotationVersion"
  kaptAndroidTest "com.google.dagger:dagger-compiler:$daggerVersion"
  androidTestImplementation "io.mockk:mockk-android:1.9"
  androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
  androidTestImplementation "org.assertj:assertj-core:3.11.1"
  androidTestImplementation("org.simpleframework:simple-xml:2.7.1") {
    exclude module: 'stax'
    exclude module: 'stax-api'
    exclude module: 'xpp3'
  }
}
